$date
	Thu Sep  6 15:45:02 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module full_adder_tb $end
$scope module full_adder_tb $end
$var wire 1 ! a $end
$var wire 1 " b $end
$var wire 1 # cin $end
$var wire 1 $ cout $end
$var wire 1 % half_adder_carry1 $end
$var wire 1 & half_adder_carry2 $end
$var wire 1 ' half_adder_sum $end
$var wire 1 ( s $end
$scope module half_adder_temp1 $end
$var wire 1 ! a $end
$var wire 1 " b $end
$var wire 1 % c $end
$var wire 1 ' s $end
$scope module and_temp $end
$var wire 1 ! A $end
$var wire 1 " B $end
$var wire 1 % res $end
$var wire 1 ) temp $end
$scope module nand_temp $end
$var wire 1 * Gnd $end
$var wire 1 + Vdd $end
$var wire 1 ! a $end
$var wire 1 " b $end
$var wire 1 , c $end
$var wire 1 ) result $end
$upscope $end
$scope module not_temp $end
$var wire 1 - Gnd $end
$var wire 1 . Vdd $end
$var wire 1 ) a $end
$var wire 1 % result $end
$upscope $end
$upscope $end
$scope module xor_temp $end
$var wire 1 / Gnd $end
$var wire 1 0 Vdd $end
$var wire 1 ! a $end
$var wire 1 1 a_comp $end
$var wire 1 " b $end
$var wire 1 2 b_comp $end
$var wire 1 3 m $end
$var wire 1 ' result $end
$var wire 1 4 temp $end
$var wire 1 5 x $end
$var wire 1 6 y $end
$scope module not_temp1 $end
$var wire 1 7 Gnd $end
$var wire 1 8 Vdd $end
$var wire 1 ! a $end
$var wire 1 1 result $end
$upscope $end
$scope module not_temp2 $end
$var wire 1 9 Gnd $end
$var wire 1 : Vdd $end
$var wire 1 " a $end
$var wire 1 2 result $end
$upscope $end
$scope module not_temp3 $end
$var wire 1 ; Gnd $end
$var wire 1 < Vdd $end
$var wire 1 4 a $end
$var wire 1 ' result $end
$upscope $end
$upscope $end
$upscope $end
$scope module half_adder_temp2 $end
$var wire 1 ' a $end
$var wire 1 # b $end
$var wire 1 & c $end
$var wire 1 ( s $end
$scope module and_temp $end
$var wire 1 ' A $end
$var wire 1 # B $end
$var wire 1 & res $end
$var wire 1 = temp $end
$scope module nand_temp $end
$var wire 1 > Gnd $end
$var wire 1 ? Vdd $end
$var wire 1 ' a $end
$var wire 1 # b $end
$var wire 1 @ c $end
$var wire 1 = result $end
$upscope $end
$scope module not_temp $end
$var wire 1 A Gnd $end
$var wire 1 B Vdd $end
$var wire 1 = a $end
$var wire 1 & result $end
$upscope $end
$upscope $end
$scope module xor_temp $end
$var wire 1 C Gnd $end
$var wire 1 D Vdd $end
$var wire 1 ' a $end
$var wire 1 E a_comp $end
$var wire 1 # b $end
$var wire 1 F b_comp $end
$var wire 1 G m $end
$var wire 1 ( result $end
$var wire 1 H temp $end
$var wire 1 I x $end
$var wire 1 J y $end
$scope module not_temp1 $end
$var wire 1 K Gnd $end
$var wire 1 L Vdd $end
$var wire 1 ' a $end
$var wire 1 E result $end
$upscope $end
$scope module not_temp2 $end
$var wire 1 M Gnd $end
$var wire 1 N Vdd $end
$var wire 1 # a $end
$var wire 1 F result $end
$upscope $end
$scope module not_temp3 $end
$var wire 1 O Gnd $end
$var wire 1 P Vdd $end
$var wire 1 H a $end
$var wire 1 ( result $end
$upscope $end
$upscope $end
$upscope $end
$scope module or_temp $end
$var wire 1 % A $end
$var wire 1 & B $end
$var wire 1 $ res $end
$var wire 1 Q temp $end
$scope module nand_temp $end
$var wire 1 R Gnd $end
$var wire 1 S Vdd $end
$var wire 1 % a $end
$var wire 1 & b $end
$var wire 1 T c $end
$var wire 1 Q result $end
$upscope $end
$scope module not_temp $end
$var wire 1 U Gnd $end
$var wire 1 V Vdd $end
$var wire 1 Q a $end
$var wire 1 $ result $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1V
0U
1T
1S
0R
1Q
1P
0O
1N
0M
1L
0K
0J
zI
1H
1G
1F
1E
1D
0C
1B
0A
z@
1?
0>
1=
1<
0;
1:
09
18
07
06
z5
14
13
12
11
10
0/
1.
0-
z,
1+
0*
1)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#10
0@
0I
1(
0H
zJ
0F
1#
#20
z@
zI
0J
zG
1F
0#
0,
05
0$
1Q
0&
1=
1(
0H
0E
1'
04
z6
02
1"
#30
1$
0Q
1&
0=
0@
0I
zJ
0(
1H
1G
0F
1#
#40
z@
zI
0J
zG
1F
0#
z,
z5
06
z3
12
0"
1T
0%
1)
0$
1Q
0&
1=
1(
0H
0E
1'
04
01
1!
#50
1$
0Q
1&
0=
0@
0I
zJ
0(
1H
1G
0F
1#
#60
z@
zI
0J
1F
0#
zT
1%
0)
0,
05
z6
1$
0Q
0&
1=
0(
1H
1E
0'
14
13
02
1"
#70
0@
0I
1(
0H
zJ
0F
1#
